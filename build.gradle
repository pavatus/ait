plugins {
    id "fabric-loom" version "1.9-SNAPSHOT"
    id "maven-publish"

    id "com.diffplug.spotless" version "6.20.0"
}

apply from: 'versioning.gradle'

version = getCurrentVersion()
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven { url "https://maven.wispforest.io" }

    maven {
        name "Ladysnake Mods"
        url "https://maven.ladysnake.org/releases"
    }

    maven {
        url "https://jitpack.io"

        metadataSources {
            artifact() // Look directly for artifact
        }
    }

    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }

    maven {
        url "https://cursemaven.com"
        content { includeGroup "curse.maven" }

        metadataSources {
            artifact() // Look directly for artifact
        }
    }

    maven {
        name "Modrinth"
        url "https://api.modrinth.com/maven"
    }

    maven { url = 'https://maven.nucleoid.xyz/' }
    maven { url 'https://maven.blamejared.com' }
}

loom {
    accessWidenerPath = file("src/main/resources/ait.accesswidener")

    runs {
        // This adds a new gradle task that runs the datagen API
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=ait"

            runDir "build/datagen"
        }
    }
}

// Add the generated resources to the main source set
sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated"
            ]
        }
    }
}
dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    implementation 'com.google.code.gson:gson:2.8.9'

    modCompileOnlyApi("com.github.qouteall:GravityChanger:${project.gravity_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "vazkii.patchouli:Patchouli:${project.patchouli_version}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modApi("com.terraformersmc:modmenu:${project.modmenu_version}")

    modCompileOnlyApi "maven.modrinth:k9-mod:${project.k9_version}"

    include(modImplementation("com.github.DrTheodor:mc-multidim:${project.multidim_version}")) {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include(modImplementation("com.github.DrTheodor:mc-scheduler:${project.scheduler_version}")) {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include(modImplementation("com.github.DrTheodor:mc-queue:${project.queue_version}")) {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation("com.github.amblelabs:modkit:${project.amblekit_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // Exclude duplicate files, I don"t why this even works
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with sound characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible) {
        it.options.release = targetJavaVersion
    }
}

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '.gitattributes', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }

    java {
        //eclipse()

        removeUnusedImports()
        importOrder('java', 'javax', '', 'net.minecraft', group)

        indentWithSpaces()
        trimTrailingWhitespace()

        formatAnnotations()
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    archivesBaseName = project.base.archivesName.get()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    // exclude assets if it's a beta dev build
    if (System.hasProperty("BETA")) {
        processResources.exclude("assets")
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

def gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()

tasks.processResources {
    filesMatching("*.properties") {
        expand(branch: gitBranch)
    }
}
